
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДоступноИзменение = Параметры.ДоступноИзменение;
	Секрет = Параметры.Секрет;
	ДанныеСекрета = ЛокальноеХранилище.ПолучитьСекрет(Секрет, Параметры.ОткрытыйКлюч);
	Для Каждого КлючЗначение Из ДанныеСекрета Цикл
		Строка = Значения.Добавить();
		Строка.Ключ = КлючЗначение.Ключ;
		Строка.Значение = КлючЗначение.Значение;
		Строка.ЗначениеЗвездочки = МаскаПароля(Строка.Значение);
		Строка.Редактирование = Не ЗначениеЗаполнено(Строка.Значение);
	КонецЦикла;
	Элементы.ФормаСохранить.Доступность = ДоступноИзменение;
КонецПроцедуры

Функция МаскаПароля(Значение)
	Возврат ?(ЗначениеЗаполнено(Значение), "•••••", "");
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	Если ЗначениеЗаполнено(МастерПарольКлиент.Получить()) Тогда
		СохранитьНаСервере(МастерПарольКлиент.Получить());
		Оповестить("ЗаписьЛокальногоХранилища");
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере(ОткрытыйКлюч)
	ДанныеСекрета = Новый Соответствие;
	Для Каждого КлючЗначение Из Значения Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Ключ) И Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСекрета.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	ЛокальноеХранилище.ЗаписатьСекрет(Секрет, ДанныеСекрета, ОткрытыйКлюч, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначенииеОткрытие(Элемент, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("ОчиститьБуферОбмена");
	СтандартнаяОбработка = Ложь;
	СкопироватьВБуфферОбмена(Элементы.Значения.ТекущиеДанные.Значение);
	Сообщить("Секрет скопирован в буфер обмена");
	ВремяАктуальности = НастройкиКонфигурацииПовтИсп.ВремяАктуальностиБуфераОбменаСекунд();
	Если ЗначениеЗаполнено(ВремяАктуальности) Тогда
		ПодключитьОбработчикОжидания("ОчиститьБуферОбмена", ВремяАктуальности, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуфферОбмена(КопируемыйТекст)
	ЗначениеБуфераОбменаКеш = КопируемыйТекст;
	ДанныеБуфераОбмена = Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.Текст, ЗначениеБуфераОбменаКеш);
	СредстваБуфераОбмена.ПоместитьДанныеАсинх(ДанныеБуфераОбмена);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОчиститьБуферОбмена() Экспорт
	ТекущееЗначениеБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Текст);
	Если ЗначениеБуфераОбменаКеш = ТекущееЗначениеБуфераОбмена Тогда
		СкопироватьВБуфферОбмена("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначенииеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ДоступноИзменение Тогда
		Возврат;
	КонецЕсли;
	Строка = Элементы.Значения.ТекущиеДанные;
	Если Строка.Редактирование Тогда
		Строка.ЗначениеЗвездочки = МаскаПароля(Строка.Значение);
	Иначе
		Строка.ЗначениеЗвездочки = Строка.Значение;
	КонецЕсли;
	Строка.Редактирование = Не Строка.Редактирование;
	Элементы.ЗначенияЗначение.РедактированиеТекста = Строка.Редактирование;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначениеПриИзменении(Элемент)
	Строка = Элементы.Значения.ТекущиеДанные;
	Если Строка.Редактирование Тогда
		Строка.Значение = Строка.ЗначениеЗвездочки;
		Строка.Редактирование = Ложь;
		Строка.ЗначениеЗвездочки = МаскаПароля(Строка.Значение);
		Элементы.ЗначенияЗначение.РедактированиеТекста = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПриАктивизацииСтроки(Элемент)
	Строка = Элементы.Значения.ТекущиеДанные;
	Если Строка <> Неопределено Тогда
		Строка.Редактирование = Строка.Редактирование Или Не ЗначениеЗаполнено(Строка.Значение);
		Элементы.ЗначенияЗначение.РедактированиеТекста = Строка.Редактирование;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОчиститьБуферОбмена();
КонецПроцедуры
