#Область ПрограммныйИнтерфейс

// Функция - Получить секрет
//
// Параметры:
//  Секрет	 - СправочникСсылка.Секреты
// 
// Возвращаемое значение:
//   - Соотвествие
//
Функция ПолучитьСекрет(Секрет) Экспорт
	
	ИсторияДоступа.ЗалогироватьСобытие(Секрет, Перечисления.Действия.ПолучениеСекрета);
	Ответ = КоннекторHTTP.Get(АдресСекрета(Секрет), , ПараметрыЗапроса());
	Если Ответ.КодСостояния = 200 Тогда
		Информация = КоннекторHTTP.КакJson(Ответ);
		Возврат Информация["data"]["data"];
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		Возврат Новый Соответствие;
	Иначе
		ВызватьИсключение КоннекторHTTP.КакТекст(Ответ);
	КонецЕсли;
	
КонецФункции

// Процедура - Записать секрет
//
// Параметры:
//  Секрет	 - СправочникСсылка.Секреты
//  Значение - Соотвествие - Произвольные ключ и значения
//
Процедура ЗаписатьСекрет(Секрет, Значение) Экспорт
	
	ИсторияДоступа.ЗалогироватьСобытие(Секрет, Перечисления.Действия.ЗаписьСекрета);
	ОбернутоеЗначение = Новый Структура("data", Значение);
	Ответ = КоннекторHTTP.Post(АдресСекрета(Секрет), , ПараметрыЗапроса(ОбернутоеЗначение));
	Если Ответ.КодСостояния = 200 Тогда
		Возврат;
	Иначе
		ВызватьИсключение КоннекторHTTP.КакТекст(Ответ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыЗапроса(JSON = Неопределено)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Vault-Token", НастройкиКонфигурацииПовтИсп.ТокенOpenBao());
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Заголовки", Заголовки);
	Если JSON <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("JSON", JSON);
	КонецЕсли;
	Возврат ПараметрыЗапроса;
КонецФункции

Функция АдресСекрета(Секрет)
	Возврат СтрШаблон("%1/v1/secret/data/%2", НастройкиКонфигурацииПовтИсп.АдресOpenBao(), Строка(Секрет.УникальныйИдентификатор()));
КонецФункции

#КонецОбласти
