
#Область ПрограммныйИнтерфейс

// Выполняет шифрование заданного текста с использованием указанного открытого ключа.
//
// Параметры:
//   Текст - Строка - исходные данные для шифрования
//   ОткрытыйКлюч - Строка - ключ, используемый для шифрования данных
//
// Возвращаемое значение:
//   Строка - зашифрованные данные в формате Base64
Функция Зашифровать(Текст, ОткрытыйКлюч) Экспорт

#Если ВебКлиент Тогда
	Возврат "";
#Иначе
	
	Если Не ЗначениеЗаполнено(Текст) Или Не ЗначениеЗаполнено(ОткрытыйКлюч) Тогда
		Возврат "";
	КонецЕсли;
	
	ПутьФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ПутьФайла);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
	//Архив = Новый ЗаписьФайлаАрхива();
	//Архив.Добавить(ПутьФайла);
	//Данные = Архив.ПолучитьДвоичныеДанные(ОткрытыйКлюч, ТипФайлаАрхива.ZIP, "", 
	//	МетодСжатияФайлаАрхива.Сжатие, УровеньСжатияФайлаАрхива.Оптимальный, МетодШифрованияФайлаАрхива.AES256);
	
	Zip = Новый ЗаписьZipФайла();
    Zip.Добавить(ПутьФайла);
    Данные = Zip.ПолучитьДвоичныеДанные(
        ОткрытыйКлюч,,
        МетодСжатияZip.BZIP2,
        УровеньСжатияZip.Оптимальный,
        МетодШифрованияZip.AES256
    );
	
	УдалитьФайлы(ПутьФайла);
	
	Возврат Base64Строка(Данные);

#КонецЕсли

КонецФункции

// Расшифровывает данные, используя указанный открытый ключ.
//
// Параметры:
//   Данные - Строка - Зашифрованные данные в формате Base64
//   ОткрытыйКлюч - Строка - Открытый ключ для расшифровки
//
// Возвращаемое значение:
//   Строка - Расшифрованные данные
Функция Расшифровать(Данные, ОткрытыйКлюч) Экспорт

#Если ВебКлиент Тогда
	Возврат Неопределено;
#Иначе
	
	Если Не ЗначениеЗаполнено(Данные) Или Не ЗначениеЗаполнено(ОткрытыйКлюч) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Поток = Новый ПотокВПамяти();
	ДвоичныеДанные = Base64Значение(Данные);
	ДвоичныеДанные.Записать(Поток);
	
	Каталог = КаталогВременныхФайлов();
	//Архив = Новый ЧтениеФайлаАрхива(Поток, ОткрытыйКлюч, ТипФайлаАрхива.ZIP);
	//Если Архив.Элементы.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//Попытка
	//	Архив.Извлечь(Архив.Элементы[0], Каталог, РежимВосстановленияПутейФайлаАрхива.НеВосстанавливать);
	//Исключение
	//	Возврат Неопределено;
	//КонецПопытки;
	//ПолноеИмяФайла = Каталог + ПолучитьРазделительПутиСервера() + Архив.Элементы[0].Имя;
	//Архив.Закрыть();
	
	Zip = Новый ЧтениеZipФайла(Поток, ОткрытыйКлюч);
    Если Zip.Элементы.Количество() = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;
    Файл = Zip.Элементы[0];
	Попытка
    	Zip.Извлечь(Файл, Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
    Zip.Закрыть();
    ПолноеИмяФайла = Каталог + ПолучитьРазделительПутиСервера() + Файл.Имя;
	
	
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ПолноеИмяФайла);
	
	Возврат Результат;
	
#КонецЕсли

КонецФункции

Функция ОбновитьЛокальноеХранилищеСекретов(ОткрытыйКлюч, Секрет = Неопределено) Экспорт
	НаборЗаписей = РегистрыСведений.ЛокальноеХранилище.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	Если ЗначениеЗаполнено(Секрет) Тогда
		НаборЗаписей.Отбор.Секрет.Установить(Секрет);
	Иначе
		ДобавитьЗаписьЛокальногоХранилища(НаборЗаписей, Неопределено, БазовоеСообщениеСекрета(), ОткрытыйКлюч, Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Секреты.Ссылка КАК Секрет,
		|	Секреты.ТипСекрета = ЗНАЧЕНИЕ(Перечисление.ТипыСекретов.Локальный) КАК Локальный,
		|	ЕСТЬNULL(ЛокальноеХранилище.Модифицированность, ЛОЖЬ) КАК Модифицированность
		|ИЗ
		|	Справочник.Секреты КАК Секреты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступа КАК ПраваДоступа
		|		ПО (ПраваДоступа.СекретСейф В (Секреты.Ссылка, Секреты.Сейф))
		|			И (ПраваДоступа.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛокальноеХранилище КАК ЛокальноеХранилище
		|		ПО Секреты.Ссылка = ЛокальноеХранилище.Секрет
		|			И (ЛокальноеХранилище.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	&Секрет В (НЕОПРЕДЕЛЕНО, Секреты.Ссылка)";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Секрет", Секрет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Локальный или Выборка.Модифицированность Тогда
			ТекстСекрета = ЛокальноеХранилище.ПолучитьСекрет(Выборка.Секрет, ОткрытыйКлюч);
		Иначе
			ДанныеСекрета = ИнтеграцияOpenBao.ПолучитьСекрет(Выборка.Секрет);
			ТекстСекрета = КоннекторHTTP.ОбъектВJson(ДанныеСекрета);
		КонецЕсли;
		ДобавитьЗаписьЛокальногоХранилища(НаборЗаписей, Выборка.Секрет, ТекстСекрета, ОткрытыйКлюч, Выборка.Модифицированность);
	КонецЦикла;
	НаборЗаписей.Записать();
КонецФункции

Функция МастерПарольУжеУстановлен() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛокальноеХранилище.Пользователь КАК Пользователь,
		|	ЛокальноеХранилище.Секрет КАК Секрет
		|ИЗ
		|	РегистрСведений.ЛокальноеХранилище КАК ЛокальноеХранилище
		|ГДЕ
		|	ЛокальноеХранилище.Пользователь = &Пользователь
		|	И ЛокальноеХранилище.Секрет = ЗНАЧЕНИЕ(Справочник.Секреты.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция ПроверитьМастерПароль(ОткрытыйКлюч) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛокальноеХранилище.ЗашифрованноеЗначение КАК ЗашифрованноеЗначение
		|ИЗ
		|	РегистрСведений.ЛокальноеХранилище КАК ЛокальноеХранилище
		|ГДЕ
		|	ЛокальноеХранилище.Пользователь = &Пользователь
		|	И ЛокальноеХранилище.Секрет = ЗНАЧЕНИЕ(Справочник.Секреты.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ЗаписатьБазовоеСообщениеСекрета(ОткрытыйКлюч);
		Возврат Истина;
	КонецЕсли;
	Расшифровка = Расшифровать(Выборка.ЗашифрованноеЗначение.Получить(), ОткрытыйКлюч);
	Возврат Расшифровка = БазовоеСообщениеСекрета();
КонецФункции

Функция ПолучитьСекрет(Секрет, ОткрытыйКлюч) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛокальноеХранилище.ЗашифрованноеЗначение КАК ЗашифрованноеЗначение
		|ИЗ
		|	РегистрСведений.ЛокальноеХранилище КАК ЛокальноеХранилище
		|ГДЕ
		|	ЛокальноеХранилище.Пользователь = &Пользователь
		|	И ЛокальноеХранилище.Секрет = &Секрет";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Секрет", Секрет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат НастройкиКонфигурацииПовтИсп.ДанныеНовогоСекретапоУмолчанию();
	КонецЕсли;
	Расшифровка = Расшифровать(Выборка.ЗашифрованноеЗначение.Получить(), ОткрытыйКлюч);
	Если Расшифровка = Неопределено Тогда
		Возврат НастройкиКонфигурацииПовтИсп.ДанныеНовогоСекретаПоУмолчанию();
	КонецЕсли;
	Возврат КоннекторHTTP.JsonВОбъект(Расшифровка);
КонецФункции

Функция ЗаписатьСекрет(Секрет, ДанныеСекрета, ОткрытыйКлюч, Модифицированность = Ложь) Экспорт
	ТекстСекрета = КоннекторHTTP.ОбъектВJson(ДанныеСекрета);
	НаборЗаписей = РегистрыСведений.ЛокальноеХранилище.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.Секрет.Установить(Секрет);
	ДобавитьЗаписьЛокальногоХранилища(НаборЗаписей, Секрет, ТекстСекрета, ОткрытыйКлюч, Модифицированность);
	НаборЗаписей.Записать();
КонецФункции

Функция ЗаменитьМастерПароль(ОткрытыйКлючСтарый, ОткрытыйКлючНовый) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛокальноеХранилище.Пользователь КАК Пользователь,
		|	ЛокальноеХранилище.Секрет КАК Секрет,
		|	ЛокальноеХранилище.ЗашифрованноеЗначение КАК ЗашифрованноеЗначение,
		|	ЛокальноеХранилище.Модифицированность КАК Модифицированность
		|ИЗ
		|	РегистрСведений.ЛокальноеХранилище КАК ЛокальноеХранилище
		|ГДЕ
		|	ЛокальноеХранилище.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	НаборЗаписей = РегистрыСведений.ЛокальноеХранилище.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСекрета = Расшифровать(Выборка.ЗашифрованноеЗначение.Получить(), ОткрытыйКлючСтарый);
		ДобавитьЗаписьЛокальногоХранилища(НаборЗаписей, Выборка.Секрет, ТекстСекрета, ОткрытыйКлючНовый, Выборка.Модифицированность);
	КонецЦикла;
	НаборЗаписей.Записать();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция БазовоеСообщениеСекрета()
	Возврат "СекретноеМесто2025";
КонецФункции

Процедура ДобавитьЗаписьЛокальногоХранилища(НаборЗаписей, Секрет, ТекстСекрета, ОткрытыйКлюч, Модифицированность)
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.Секрет = Секрет;
	НоваяЗапись.Модифицированность = Модифицированность;
	НоваяЗапись.ЗашифрованноеЗначение = Новый ХранилищеЗначения(Зашифровать(ТекстСекрета, ОткрытыйКлюч));
КонецПроцедуры

Процедура ЗаписатьБазовоеСообщениеСекрета(ОткрытыйКлюч)
	НаборЗаписей = РегистрыСведений.ЛокальноеХранилище.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	ДобавитьЗаписьЛокальногоХранилища(НаборЗаписей, Неопределено, БазовоеСообщениеСекрета(), ОткрытыйКлюч, Ложь);
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти
